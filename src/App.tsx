import { useState, useEffect } from "react";
import { motion } from "framer-motion";
import { Button, Card, CardContent, Stack, Typography } from "@mui/material";
import styled from "styled-components";

const questions = [
  {
    question: "–ö–∞–∫–æ–π —Ç–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å?",
    options: [
      { text: "–ê–∫—Ç–∏–≤–Ω—ã–π –∏ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π", flower: "–ü–æ–¥—Å–æ–ª–Ω—É—Ö" },
      { text: "–°–ø–æ–∫–æ–π–Ω—ã–π –∏ —É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–Ω—ã–π", flower: "–õ–∞–≤–∞–Ω–¥–∞" },
      { text: "–†–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π –∏ –º–µ—á—Ç–∞—Ç–µ–ª—å–Ω—ã–π", flower: "–†–æ–∑–∞" },
      { text: "–í–µ—Å–µ–ª—ã–π –∏ —è—Ä–∫–∏–π", flower: "–¢—é–ª—å–ø–∞–Ω" },
    ],
  },
  {
    question: "–í—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ:",
    options: [
      { text: "–ñ–µ–ª—Ç—ã–π", flower: "–ü–æ–¥—Å–æ–ª–Ω—É—Ö" },
      { text: "–§–∏–æ–ª–µ—Ç–æ–≤—ã–π", flower: "–õ–∞–≤–∞–Ω–¥–∞" },
      { text: "–ö—Ä–∞—Å–Ω—ã–π", flower: "–†–æ–∑–∞" },
      { text: "–†–æ–∑–æ–≤—ã–π", flower: "–¢—é–ª—å–ø–∞–Ω" },
    ],
  },
  {
    question: "–ö–∞–∫ –±—ã —Ç–µ–±—è –æ–ø–∏—Å–∞–ª–∏ –¥—Ä—É–∑—å—è?",
    options: [
      { text: "–≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π", flower: "–ü–æ–¥—Å–æ–ª–Ω—É—Ö" },
      { text: "–°–ø–æ–∫–æ–π–Ω—ã–π –∏ –¥–æ–±—Ä—ã–π", flower: "–õ–∞–≤–∞–Ω–¥–∞" },
      { text: "–ß—É–≤—Å—Ç–≤–µ–Ω–Ω—ã–π –∏ –∑–∞–≥–∞–¥–æ—á–Ω—ã–π", flower: "–†–æ–∑–∞" },
      { text: "–õ–µ–≥–∫–∏–π –Ω–∞ –ø–æ–¥—ä–µ–º –∏ –≤–µ—Å–µ–ª—ã–π", flower: "–¢—é–ª—å–ø–∞–Ω" },
    ],
  },
];

const FlowerQuiz = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState([]);
  const [result, setResult] = useState(null);

  const handleAnswer = (flower) => {
    const newAnswers = [...answers, flower];
    setAnswers(newAnswers);

    if (currentQuestion + 1 < questions.length) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      const flowerCounts = newAnswers.reduce((acc, flower) => {
        acc[flower] = (acc[flower] || 0) + 1;
        return acc;
      }, {});

      const mostCommonFlower = Object.keys(flowerCounts).reduce((a, b) =>
        flowerCounts[a] > flowerCounts[b] ? a : b
      );

      setResult(mostCommonFlower);
    }
  };

  const Petal = () => {
    const randomX = Math.random() * window.innerWidth;
    const randomDuration = Math.random() * 5 + 3;
    return (
      <motion.div
        initial={{ opacity: 0, y: -50, x: randomX }}
        animate={{ opacity: 1, y: window.innerHeight }}
        transition={{ duration: randomDuration, ease: "linear" }}
        className="absolute text-pink-400 text-4xl"
        style={{ position: "absolute" }}
      >
        üåπ
      </motion.div>
    );
  };

  const [petals, setPetals] = useState([]);

  useEffect(() => {
    const interval = setInterval(() => {
      setPetals((prev) => [...prev, <Petal key={Math.random()} />]);
    }, 500);

    return () => clearInterval(interval);
  }, []);

  return (
    <StyledContainer
      className="relative flex items-center justify-center min-h-screen bg-pink-50 overflow-hidden"
      style={{ width: "100%" }}
    >
      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª–µ–ø–µ—Å—Ç–∫–æ–≤ */}
      <div className="absolute top-0 left-0 w-full h-full pointer-events-none">
        {petals}
      </div>

      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ–ø—Ä–æ—Å–∞ */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="relative z-10"
        style={{ margin: "auto" }}
      >
        <Card
          sx={{
            backgroundColor: "#FFC0CB",
            borderRadius: 4,
            boxShadow: 3,
            maxWidth: 400,
            textAlign: "center",
            p: 2,
          }}
        >
          <CardContent>
            {result ? (
              <>
                <Typography variant="h5" fontWeight="bold">
                  –¢—ã ‚Äî {result}! üå∏
                </Typography>
                <Typography variant="body1" sx={{ mt: 2 }}>
                  –≠—Ç–æ—Ç —Ü–≤–µ—Ç–æ–∫ –æ—Ç—Ä–∞–∂–∞–µ—Ç —Ç–≤–æ—é –ª–∏—á–Ω–æ—Å—Ç—å –∏ —ç–Ω–µ—Ä–≥–∏—é!
                </Typography>
                <Button
                  variant="contained"
                  sx={{ mt: 3, backgroundColor: "#E91E63" }}
                  onClick={() => {
                    setCurrentQuestion(0);
                    setAnswers([]);
                    setResult(null);
                  }}
                >
                  –ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞
                </Button>
              </>
            ) : (
              <>
                <Typography variant="h6" fontWeight="bold">
                  {questions[currentQuestion].question}
                </Typography>
                <div style={{ marginTop: "1rem" }}>
                  {questions[currentQuestion].options.map((option, index) => (
                    <Button
                      key={index}
                      variant="contained"
                      fullWidth
                      sx={{ mt: 1, backgroundColor: "#F48FB1" }}
                      onClick={() => handleAnswer(option.flower)}
                    >
                      {option.text}
                    </Button>
                  ))}
                </div>
              </>
            )}
          </CardContent>
        </Card>
      </motion.div>
    </StyledContainer>
  );
};

export default FlowerQuiz;

const StyledContainer = styled(Stack)(() => ({
  minHeight: "100vw",
  display: "flex",
}));
